
INTEGRATE DETAILS PAGE INTO APPLICATION
THEORY/SUMMARY:
Summary: In this lesson you added routing to show details pages.

This tutorial lesson demonstrates how to connect the details page to your app.
IMPORTANT: We recommend using your local environment to learn routing.
What you'll learn:
-At the end of this lesson your application will have support for routing to the details page.

Conceptual preview of routing with route parameters
Each housing location has specific details that should be displayed when a user navigates to the details page for that item.
To accomplish this goal, you will need to use route parameters.
Route parameters enable you to include dynamic information as a part of your route URL.
To identify which housing location a user has clicked on you will use the id property of the HousingLocation type.

Using routerLink for dynamic navigation:
In lesson 10, you added a second route to src/app/routes.ts which includes
a special segment that identifies the route parameter, id: 'details/:id'
In this case, :id is dynamic and will change based on how the route is requested by the code.

PRACTICE:
1. In src/app/housing-location/housing-location.component.ts, add an anchor tag
A ... to the section element and include the routerLink directive:
B. Add anchor with a routerLink directive to housing-location.component.ts
C. <a [routerLink]="['/details', housingLocation.id]">Learn More</a>
D. The routerLink directive enables Angular's router to create dynamic links in the application.
E. The value assigned to the routerLink is an array with two entries: the static portion of the path and the dynamic data.
F. For the routerLink to work in the template, add a file level import of RouterLink and RouterOutlet from '@angular/router',
G. ... then update the component imports array to include both RouterLink and RouterOutlet.
H. At this point you can confirm that the routing is working in your app.
I. In the browser, refresh the home page and click the "Learn More" button for a housing location.
[details page displaying the text 'details works!']
GET ROUTE PARAMETERS
2. In this step, you will get the route parameter in the DetailsComponent.
A. Currently, the app displays details works!.
B. Next you'll update the code to display the id value passed using the route parameters.
3. In src/app/details/details.component.ts update the template to import the functions, classes and services
A. ... that you'll need to use in the DetailsComponent:
B. Update file level imports:
import {Component, inject} from '@angular/core';
import {CommonModule} from '@angular/common';
import {ActivatedRoute} from '@angular/router';
import {HousingService} from '../housing.service';
import {HousingLocation} from '../housinglocation';
C. Update the template property of the @Component decorator to display the value housingLocationId:
template: `<p>details works! {{ housingLocationId }}</p>`,
4. Update the body of the DetailsComponent class with the following code:
export class DetailsComponent {
  route: ActivatedRoute = inject(ActivatedRoute);
  // housingLocationId = -1;
  housingService = inject(HousingService);
  housingLocation: HousingLocation | undefined;

  constructor() {
    // this.housingLocationId = Number(this.route.snapshot.params['id']);
    const housingLocationId = Number(this.route.snapshot.params['id']);
    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);    
  }
}
A. This code gives the DetailsComponent access to the ActivatedRoute router feature that enables you to have access to the data about the current route. In the constructor, the code converts the id parameter acquired from the route from a string to a number.
5. Save all changes.
A. In the browser, click on one of the housing location's "Learn More" links and confirm
B. ... that the numeric value displayed on the page matches the id property for that location in the data.
CUSTOMIZE THE DETAILCOMPONENT
6. Now that routing is working properly in the application this is a great time to update the template
A. ... of the DetailsComponent to display the specific data represented by the housing location for the route parameter.
7. To access the data you will add a call to the HousingService.
A. Update the template code to match the following code:
B. Update the DetailsComponent template in src/app/details/details.component.ts
template: `
<article>
  <img
    class="listing-photo"
    [src]="housingLocation?.photo"
    alt="Exterior photo of {{ housingLocation?.name }}"
    crossorigin
  />
  <section class="listing-description">
    <h2 class="listing-heading">{{ housingLocation?.name }}</h2>
    <p class="listing-location">{{ housingLocation?.city }}, {{ housingLocation?.state }}</p>
  </section>
  <section class="listing-features">
    <h2 class="section-heading">About this housing location</h2>
    <ul>
      <li>Units available: {{ housingLocation?.availableUnits }}</li>
      <li>Does this location have wifi: {{ housingLocation?.wifi }}</li>
      <li>Does this location have laundry: {{ housingLocation?.laundry }}</li>
    </ul>
  </section>
</article>
`,
C. Notice that the housingLocation properties are being accessed with the optional chaining operator ?.
D. This ensures that if the housingLocation value is null or undefined the application doesn't crash.
8. Update the body of the DetailsComponent class to match the following code:
A. Update the DetailsComponent class in src/app/details/details.component.ts:
export class DetailsComponent {
  route: ActivatedRoute = inject(ActivatedRoute);
  housingService = inject(HousingService);
  housingLocation: HousingLocation | undefined;

  constructor() {
    const housingLocationId = Number(this.route.snapshot.params['id']);
    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);    
  }
}
B. Now the component has the code to display the correct information based on the selected housing location.
C. The constructor now includes a call to the HousingService to pass the route parameter as an argument to the getHousingLocationById service function.
9. Copy the following styles into the src/app/details/details.component.css file:
A. Add styles for the DetailsComponent
.listing-photo {
  height: 600px;
  width: 50%;
  object-fit: cover;
  border-radius: 30px;
  float: right;
}
.listing-heading {
  font-size: 48pt;
  font-weight: bold;
  margin-bottom: 15px;
}
.listing-location::before {
  content: url('/assets/location-pin.svg') / '';
}
.listing-location {
  font-size: 24pt;
  margin-bottom: 15px;
}
.listing-features > .section-heading {
  color: var(--secondary-color);
  font-size: 24pt;
  margin-bottom: 15px;
}
.listing-features {
  margin-bottom: 20px;
}
.listing-features li {
  font-size: 14pt;
}
li {
  list-style-type: none;
}
.listing-apply .section-heading {
  font-size: 18pt;
  margin-bottom: 15px;
}
label, input {
  display: block;
}
label {
  color: var(--secondary-color);
  font-weight: bold;
  text-transform: uppercase;
  font-size: 12pt;
}
input {
  font-size: 16pt;
  margin-bottom: 15px;
  padding: 10px;
  width: 400px;
  border-top: none;
  border-right: none;
  border-left: none;
  border-bottom: solid .3px;
}
@media (max-width: 1024px) {
  .listing-photo {
    width: 100%;
    height: 400px;
  }
}
10. Save your changes.
A. In the browser refresh the page and confirm that when you click on the "Learn More" link for a given housing location
B. ... the details page displays the correct information based on the data for that selected item.
11. Details page listing home info
A. Add navigation to the HomeComponent
B. In a previous lesson you updated the AppComponent template to include a routerLink.
C. Adding that code updated your app to enable navigation back to the HomeComponent whenever the logo is clicked.
D. Confirm that your code matches the following:
E. Add routerLink to AppComponent
  imports: [HomeComponent, RouterLink, RouterOutlet],
  template: `
    <main>
      <a [routerLink]="['/']">
        <header class="brand-name">
          <img class="brand-logo" src="/assets/logo.svg" alt="logo" aria-hidden="true" />
        </header>
      </a>
      <section class="content">
        <router-outlet></router-outlet>
      </section>
    </main>
  `,  // template: `<h1>Hello World!</h1>`,
F. Your code may already be up-to-date but confirm to be sure.
G. You now know how to:
I. use route parameters to pass data to a route
II. use the routerLink directive to use dynamic data to create a route
III. use route parameter to retrieve data from the HousingService to display specific housing location information.
12. Really great work so far.
13. For more information about the topics covered in this lesson, visit:
A. Route Parameters
B. Routing in Angular Overview
C. Common Routing Tasks
D. Optional Chaining Operator