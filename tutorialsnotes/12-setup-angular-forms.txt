
ADDING A FORM TO YOUR ANGULAR APP
THEORY/SUMMARY:
Summary: In this lesson, you updated your app to add a form using Angular's forms feature,
and connect the data captured in the form to a component using an event handler.

This tutorial lesson demonstrates how to add a form that collects user data to an Angular app.
This lesson starts with a functional Angular app and shows how to add a form to it.
The data that the form collects is sent only to the app's service, which writes it to the browser's console.
Using a REST API to send and receive the form's data is not covered in this lesson.
IMPORTANT: We recommend using your local environment for this step of the tutorial.

What you'll learn:
-Your app has a form into which users can enter data that is sent to your app's service.
-The service writes the data from the form to the browser's console log.

PRACTICE:
1. Add a method to send form data
A. This step adds a method to your app's service that receives the form data to send to the data's destination.
B. In this example, the method writes the data from the form to the browser's console log.
2. In the Edit pane of your IDE:
A. In src/app/housing.service.ts, inside the HousingService class, paste this method at the bottom of the class definition.
B. Submit method in src/app/housing.service.ts
submitApplication(firstName: string, lastName: string, email: string) {
    console.log(`Homes application received: firstName: ${firstName}, lastName: ${lastName}, email: ${email}.`,);
}
C. Confirm that the app builds without error. Correct any errors before you continue to the next step.
2. Add the form functions to the details page
A. This step adds the code to the details page that handles the form's interactions.
B. In the Edit pane of your IDE, in src/app/details/details.component.ts:
C. After the import statements at the top of the file, add the following code to import the Angular form classes.
I. Forms imports in src/app/details/details.component.ts
II. import {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';
D. In the DetailsComponent decorator metadata, update the imports property with the following code:
E. imports directive in src/app/details/details.component.ts
I. imports: [CommonModule, ReactiveFormsModule],
3. In the DetailsComponent class, before the constructor() method, add the following code to create the form object.
A. template directive in src/app/details/details.component.ts
applyForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
    email: new FormControl(''),
});
B. In Angular, FormGroup and FormControl are types that enable you to build forms.
C. The FormControl type can provide a default value and shape the form data.
D. In this example firstName is a string and the default value is empty string.
4. In the DetailsComponent class, after the constructor() method, add the following code to handle the Apply now click.
A. template directive in src/app/details/details.component.ts
submitApplication() {
    this.housingService.submitApplication(
        this.applyForm.value.firstName ?? '',
        this.applyForm.value.lastName ?? '',
        this.applyForm.value.email ?? '',
    );
}
B. This button does not exist yet - you will add it in the next step. In the above code, the FormControls may return null. This code uses the nullish coalescing operator to default to empty string if the value is null.
C. Confirm that the app builds without error.
D. Correct any errors before you continue to the next step.
5. Add the form's markup to the details page
A. This step adds the markup to the details page that displays the form.
B. In the Edit pane of your IDE, in src/app/details/details.component.ts:
C. In the DetailsComponent decorator metadata, update the template HTML to match the following code to add the form's markup.
D. template directive in src/app/details/details.component.ts
<section class="listing-apply">
    <h2 class="section-heading">Apply now to live here</h2>
    <form [formGroup]="applyForm" (submit)="submitApplication()">
        <label for="first-name">First Name</label>
        <input id="first-name" type="text" formControlName="firstName" />
        
        <label for="last-name">Last Name</label>
        <input id="last-name" type="text" formControlName="lastName" />
        
        <label for="email">Email</label>
        <input id="email" type="email" formControlName="email" />
        
        <button type="submit" class="primary">Apply now</button>
    </form>
</section>
E. The template now includes an event handler (submit)="submitApplication()".
F. Angular uses parentheses syntax around the event name to define events in the template code.
G. The code on the right hand side of the equals sign is the code that should be executed when this event is triggered.
H. You can bind to browser events and custom events.
I. Confirm that the app builds without error. Correct any errors before you continue to the next step.
[details page with a form for applying to live at this location]
J. Test your app's new form
6. This step tests the new form to see that when the form data is submitted to the app, the form data appears in the console log.
A. In the Terminal pane of your IDE, run ng serve, if it isn't already running.
B. In your browser, open your app at http://localhost:4200.
C. Right click on the app in the browser and from the context menu, choose Inspect.
D. In the developer tools window, choose the Console tab.
E. Make sure that the developer tools window is visible for the next steps
F. In your app:
I. Select a housing location and click Learn more, to see details about the house.
II. In the house's details page, scroll to the bottom to find the new form.
III. Enter data into the form's fields - any data is fine.
IV. Choose Apply now to submit the data.
V. In the developer tools window, review the log output to find your form data.
G. For more information about the topics covered in this lesson, visit:
I. Angular Forms
II. Event Handling
