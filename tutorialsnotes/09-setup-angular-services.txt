
ANGULAR SERVICES
THEORY/SUMMARY:
Summary: In this lesson, you added an Angular service to your app and injected it into the HomeComponent class.
This compartmentalizes how your app gets its data.
For now, the new service gets its data from a static array of data.
In a later lesson, you'll refactor the service to get its data from an API endpoint.

This tutorial lesson demonstrates how to create an Angular service and use dependency injection to include it in your app.
What you'll learn:
-Your app has a service to serve the data to your app.
-At the end of this lesson, the service reads data from local, static data.
-In a later lesson, you'll update the service to get data from a web service.

CONCEPTUAL PREVIEW OF SERVICES
This tutorial introduces Angular services and dependency injection.
Angular services: 
Angular services provide a way for you to separate Angular app data and functions that can be used by multiple components in your app.
To be used by multiple components, a service must be made injectable.
Services that are injectable and used by a component become dependencies of that component.
The component depends on those services and can't function without them.
Dependency injection:
Dependency injection is the mechanism that manages the dependencies of an app's components
and the services that other components can use.

PRACTICE:
1. Create a new service for your app
A. This step creates an injectable service for your app.
2. In the Terminal pane of your IDE:
A. In your project directory, navigate to the first-app directory.
B. In the first-app directory, run this command to create the new service.
I. ng generate service housing --skip-tests
2. Run ng serve to build the app and serve it to http://localhost:4200.
A. Confirm that the app builds without error.
B. Correct any errors before you continue to the next step.
3. Add static data to the new service
A. This step adds some sample data to your new service.
B. In a later lesson, you'll replace the static data with a web interface to get data as you might in a real app.
C. For now, your app's new service uses the data that has, so far, been created locally in HomeComponent.
4. In the Edit pane of your IDE:
A. In src/app/home/home.component.ts, from HomeComponent, copy the housingLocationList variable and its array value.
B. In src/app/housing.service.ts:
C. Inside the HousingService class, paste the variable that you copied from HomeComponent in the previous step.
D. Inside the HousingService class, paste these functions after the data you just copied.
E. These functions allow dependencies to access the service's data.
F. Service functions in src/app/housing.service.ts
getAllHousingLocations(): HousingLocation[] {
    return this.housingLocationList;
}
getHousingLocationById(id: number): HousingLocation | undefined {
    return this.housingLocationList.find((housingLocation) => housingLocation.id === id);
}
G. You will need these functions in a future lesson.
H. For now, it is enough to understand that these functions return either a specific HousingLocation by id or the entire list.
I. Add a file level import for the HousingLocation.
J. Import HousingLocation type in src/app/housing.service.ts:
K. import {HousingLocation} from './housinglocation';
L. Confirm that the app builds without error. Correct any errors before you continue to the next step.
INJECT THE NEW SERVICE INTO HOMECOMPONENT
5. This step injects the new service into your app's HomeComponent so that it can read the app's data from a service.
A. In a later lesson, you'll replace the static data with a live data source to get data as you might in a real app.
6. In the Edit pane of your IDE, in src/app/home/home.component.ts:
A. At the top of src/app/home/home.component.ts, add the inject to the items imported from @angular/core.
B. This will import the inject function into the HomeComponent class.
C. Update to src/app/home/home.component.ts:
D. import {Component, inject} from '@angular/core';
E. Add a new file level import for the HousingService:
F. Add import to src/app/home/home.component.ts
G. import {HousingService} from '../housing.service';
6. From HomeComponent, delete the housingLocationList array entries and assign housingLocationList the value of empty array ([]).
7. In a few steps you will update the code to pull the data from the HousingService.
8. In HomeComponent, add the following code to inject the new service and initialize the data for the app.
A. The constructor is the first function that runs when this component is created.
B. The code in the constructor will assign the housingLocationList the value returned from the call to getAllHousingLocations.
9. Initialize data from service in src/app/home/home.component.ts
housingService: HousingService = inject(HousingService);
constructor() {
    this.housingLocationList = this.housingService.getAllHousingLocations();
}
10. Save the changes to src/app/home/home.component.ts and confirm your app builds without error.
11. Correct any errors before you continue to the next step.
12. For more information about the topics covered in this lesson, visit:
A. Creating an injectable service
B. Dependency injection in Angular
C. ng generate service
D. ng generate